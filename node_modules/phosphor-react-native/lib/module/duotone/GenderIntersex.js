function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
/* GENERATED FILE */
import * as React from "react";
import Svg, { Path } from "react-native-svg";
const GenderIntersex = props => /*#__PURE__*/React.createElement(Svg, _extends({
  className: "gender-intersex-duotone__svg-icon-phosphor",
  fill: props.color,
  viewBox: "0 0 256 256",
  width: props.size,
  height: props.size
}, props), /*#__PURE__*/React.createElement(Path, {
  d: "M176 112a56 56 0 1 1-56-56 56 56 0 0 1 56 56Z",
  opacity: 0.2
}), /*#__PURE__*/React.createElement(Path, {
  d: "M208 24h-40a8 8 0 0 0 0 16h20.69l-25.15 25.15A64 64 0 1 0 112 175.48V192H88a8 8 0 0 0 0 16h24v24a8 8 0 0 0 16 0v-24h24a8 8 0 0 0 0-16h-24v-16.52a63.92 63.92 0 0 0 45.84-98L200 51.31V72a8 8 0 0 0 16 0V32a8 8 0 0 0-8-8Zm-88 136a48 48 0 1 1 48-48 48.05 48.05 0 0 1-48 48Z"
}));
export default GenderIntersex;
//# sourceMappingURL=GenderIntersex.js.map